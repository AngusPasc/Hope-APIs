unit Khronos.WebGL2;

interface

uses
  Khronos.WebGL, ECMA.TypedArray, W3C.Html5, W3C.Canvas2dContext;

type
	TGLint64 = Integer;
	TGLuint64 = Integer;
	JWebGLQuery = class external 'WebGLQuery' (JWebGLObject);
	JWebGLSampler = class external 'WebGLSampler' (JWebGLObject);
	JWebGLSync = class external 'WebGLSync' (JWebGLObject);
	JWebGLTransformFeedback = class external 'WebGLTransformFeedback' (JWebGLObject);
	JWebGLVertexArrayObject = class external 'WebGLVertexArrayObject' (JWebGLObject);

	// NoInterfaceObject
	JWebGL2RenderingContextBase = class external 'WebGL2RenderingContextBase'
	const 
		READ_BUFFER: TGLenum = 3074;
		UNPACK_ROW_LENGTH: TGLenum = 3314;
		UNPACK_SKIP_ROWS: TGLenum = 3315;
		UNPACK_SKIP_PIXELS: TGLenum = 3316;
		PACK_ROW_LENGTH: TGLenum = 3330;
		PACK_SKIP_ROWS: TGLenum = 3331;
		PACK_SKIP_PIXELS: TGLenum = 3332;
		COLOR: TGLenum = 6144;
		DEPTH: TGLenum = 6145;
		STENCIL: TGLenum = 6146;
		RED: TGLenum = 6403;
		RGB8: TGLenum = 32849;
		RGBA8: TGLenum = 32856;
		RGB10_A2: TGLenum = 32857;
		TEXTURE_BINDING_3D: TGLenum = 32874;
		UNPACK_SKIP_IMAGES: TGLenum = 32877;
		UNPACK_IMAGE_HEIGHT: TGLenum = 32878;
		TEXTURE_3D: TGLenum = 32879;
		TEXTURE_WRAP_R: TGLenum = 32882;
		MAX_3D_TEXTURE_SIZE: TGLenum = 32883;
		UNSIGNED_INT_2_10_10_10_REV: TGLenum = 33640;
		MAX_ELEMENTS_VERTICES: TGLenum = 33000;
		MAX_ELEMENTS_INDICES: TGLenum = 33001;
		TEXTURE_MIN_LOD: TGLenum = 33082;
		TEXTURE_MAX_LOD: TGLenum = 33083;
		TEXTURE_BASE_LEVEL: TGLenum = 33084;
		TEXTURE_MAX_LEVEL: TGLenum = 33085;
		MIN: TGLenum = 32775;
		MAX: TGLenum = 32776;
		DEPTH_COMPONENT24: TGLenum = 33190;
		MAX_TEXTURE_LOD_BIAS: TGLenum = 34045;
		TEXTURE_COMPARE_MODE: TGLenum = 34892;
		TEXTURE_COMPARE_FUNC: TGLenum = 34893;
		CURRENT_QUERY: TGLenum = 34917;
		QUERY_RESULT: TGLenum = 34918;
		QUERY_RESULT_AVAILABLE: TGLenum = 34919;
		STREAM_READ: TGLenum = 35041;
		STREAM_COPY: TGLenum = 35042;
		STATIC_READ: TGLenum = 35045;
		STATIC_COPY: TGLenum = 35046;
		DYNAMIC_READ: TGLenum = 35049;
		DYNAMIC_COPY: TGLenum = 35050;
		MAX_DRAW_BUFFERS: TGLenum = 34852;
		DRAW_BUFFER0: TGLenum = 34853;
		DRAW_BUFFER1: TGLenum = 34854;
		DRAW_BUFFER2: TGLenum = 34855;
		DRAW_BUFFER3: TGLenum = 34856;
		DRAW_BUFFER4: TGLenum = 34857;
		DRAW_BUFFER5: TGLenum = 34858;
		DRAW_BUFFER6: TGLenum = 34859;
		DRAW_BUFFER7: TGLenum = 34860;
		DRAW_BUFFER8: TGLenum = 34861;
		DRAW_BUFFER9: TGLenum = 34862;
		DRAW_BUFFER10: TGLenum = 34863;
		DRAW_BUFFER11: TGLenum = 34864;
		DRAW_BUFFER12: TGLenum = 34865;
		DRAW_BUFFER13: TGLenum = 34866;
		DRAW_BUFFER14: TGLenum = 34867;
		DRAW_BUFFER15: TGLenum = 34868;
		MAX_FRAGMENT_UNIFORM_COMPONENTS: TGLenum = 35657;
		MAX_VERTEX_UNIFORM_COMPONENTS: TGLenum = 35658;
		SAMPLER_3D: TGLenum = 35679;
		SAMPLER_2D_SHADOW: TGLenum = 35682;
		FRAGMENT_SHADER_DERIVATIVE_HINT: TGLenum = 35723;
		PIXEL_PACK_BUFFER: TGLenum = 35051;
		PIXEL_UNPACK_BUFFER: TGLenum = 35052;
		PIXEL_PACK_BUFFER_BINDING: TGLenum = 35053;
		PIXEL_UNPACK_BUFFER_BINDING: TGLenum = 35055;
		FLOAT_MAT2x3: TGLenum = 35685;
		FLOAT_MAT2x4: TGLenum = 35686;
		FLOAT_MAT3x2: TGLenum = 35687;
		FLOAT_MAT3x4: TGLenum = 35688;
		FLOAT_MAT4x2: TGLenum = 35689;
		FLOAT_MAT4x3: TGLenum = 35690;
		SRGB: TGLenum = 35904;
		SRGB8: TGLenum = 35905;
		SRGB8_ALPHA8: TGLenum = 35907;
		COMPARE_REF_TO_TEXTURE: TGLenum = 34894;
		RGBA32F: TGLenum = 34836;
		RGB32F: TGLenum = 34837;
		RGBA16F: TGLenum = 34842;
		RGB16F: TGLenum = 34843;
		VERTEX_ATTRIB_ARRAY_INTEGER: TGLenum = 35069;
		MAX_ARRAY_TEXTURE_LAYERS: TGLenum = 35071;
		MIN_PROGRAM_TEXEL_OFFSET: TGLenum = 35076;
		MAX_PROGRAM_TEXEL_OFFSET: TGLenum = 35077;
		MAX_VARYING_COMPONENTS: TGLenum = 35659;
		TEXTURE_2D_ARRAY: TGLenum = 35866;
		TEXTURE_BINDING_2D_ARRAY: TGLenum = 35869;
		R11F_G11F_B10F: TGLenum = 35898;
		UNSIGNED_INT_10F_11F_11F_REV: TGLenum = 35899;
		RGB9_E5: TGLenum = 35901;
		UNSIGNED_INT_5_9_9_9_REV: TGLenum = 35902;
		TRANSFORM_FEEDBACK_BUFFER_MODE: TGLenum = 35967;
		MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: TGLenum = 35968;
		TRANSFORM_FEEDBACK_VARYINGS: TGLenum = 35971;
		TRANSFORM_FEEDBACK_BUFFER_START: TGLenum = 35972;
		TRANSFORM_FEEDBACK_BUFFER_SIZE: TGLenum = 35973;
		TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: TGLenum = 35976;
		RASTERIZER_DISCARD: TGLenum = 35977;
		MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: TGLenum = 35978;
		MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: TGLenum = 35979;
		INTERLEAVED_ATTRIBS: TGLenum = 35980;
		SEPARATE_ATTRIBS: TGLenum = 35981;
		TRANSFORM_FEEDBACK_BUFFER: TGLenum = 35982;
		TRANSFORM_FEEDBACK_BUFFER_BINDING: TGLenum = 35983;
		RGBA32UI: TGLenum = 36208;
		RGB32UI: TGLenum = 36209;
		RGBA16UI: TGLenum = 36214;
		RGB16UI: TGLenum = 36215;
		RGBA8UI: TGLenum = 36220;
		RGB8UI: TGLenum = 36221;
		RGBA32I: TGLenum = 36226;
		RGB32I: TGLenum = 36227;
		RGBA16I: TGLenum = 36232;
		RGB16I: TGLenum = 36233;
		RGBA8I: TGLenum = 36238;
		RGB8I: TGLenum = 36239;
		RED_INTEGER: TGLenum = 36244;
		RGB_INTEGER: TGLenum = 36248;
		RGBA_INTEGER: TGLenum = 36249;
		SAMPLER_2D_ARRAY: TGLenum = 36289;
		SAMPLER_2D_ARRAY_SHADOW: TGLenum = 36292;
		SAMPLER_CUBE_SHADOW: TGLenum = 36293;
		UNSIGNED_INT_VEC2: TGLenum = 36294;
		UNSIGNED_INT_VEC3: TGLenum = 36295;
		UNSIGNED_INT_VEC4: TGLenum = 36296;
		INT_SAMPLER_2D: TGLenum = 36298;
		INT_SAMPLER_3D: TGLenum = 36299;
		INT_SAMPLER_CUBE: TGLenum = 36300;
		INT_SAMPLER_2D_ARRAY: TGLenum = 36303;
		UNSIGNED_INT_SAMPLER_2D: TGLenum = 36306;
		UNSIGNED_INT_SAMPLER_3D: TGLenum = 36307;
		UNSIGNED_INT_SAMPLER_CUBE: TGLenum = 36308;
		UNSIGNED_INT_SAMPLER_2D_ARRAY: TGLenum = 36311;
		DEPTH_COMPONENT32F: TGLenum = 36012;
		DEPTH32F_STENCIL8: TGLenum = 36013;
		FLOAT_32_UNSIGNED_INT_24_8_REV: TGLenum = 36269;
		FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: TGLenum = 33296;
		FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: TGLenum = 33297;
		FRAMEBUFFER_ATTACHMENT_RED_SIZE: TGLenum = 33298;
		FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: TGLenum = 33299;
		FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: TGLenum = 33300;
		FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: TGLenum = 33301;
		FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: TGLenum = 33302;
		FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: TGLenum = 33303;
		FRAMEBUFFER_DEFAULT: TGLenum = 33304;
		DEPTH_STENCIL_ATTACHMENT: TGLenum = 33306;
		DEPTH_STENCIL: TGLenum = 34041;
		UNSIGNED_INT_24_8: TGLenum = 34042;
		DEPTH24_STENCIL8: TGLenum = 35056;
		UNSIGNED_NORMALIZED: TGLenum = 35863;
		DRAW_FRAMEBUFFER_BINDING: TGLenum = 36006;
		READ_FRAMEBUFFER: TGLenum = 36008;
		DRAW_FRAMEBUFFER: TGLenum = 36009;
		READ_FRAMEBUFFER_BINDING: TGLenum = 36010;
		RENDERBUFFER_SAMPLES: TGLenum = 36011;
		FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: TGLenum = 36052;
		MAX_COLOR_ATTACHMENTS: TGLenum = 36063;
		COLOR_ATTACHMENT1: TGLenum = 36065;
		COLOR_ATTACHMENT2: TGLenum = 36066;
		COLOR_ATTACHMENT3: TGLenum = 36067;
		COLOR_ATTACHMENT4: TGLenum = 36068;
		COLOR_ATTACHMENT5: TGLenum = 36069;
		COLOR_ATTACHMENT6: TGLenum = 36070;
		COLOR_ATTACHMENT7: TGLenum = 36071;
		COLOR_ATTACHMENT8: TGLenum = 36072;
		COLOR_ATTACHMENT9: TGLenum = 36073;
		COLOR_ATTACHMENT10: TGLenum = 36074;
		COLOR_ATTACHMENT11: TGLenum = 36075;
		COLOR_ATTACHMENT12: TGLenum = 36076;
		COLOR_ATTACHMENT13: TGLenum = 36077;
		COLOR_ATTACHMENT14: TGLenum = 36078;
		COLOR_ATTACHMENT15: TGLenum = 36079;
		FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: TGLenum = 36182;
		MAX_SAMPLES: TGLenum = 36183;
		HALF_FLOAT: TGLenum = 5131;
		RG: TGLenum = 33319;
		RG_INTEGER: TGLenum = 33320;
		R8: TGLenum = 33321;
		RG8: TGLenum = 33323;
		R16F: TGLenum = 33325;
		R32F: TGLenum = 33326;
		RG16F: TGLenum = 33327;
		RG32F: TGLenum = 33328;
		R8I: TGLenum = 33329;
		R8UI: TGLenum = 33330;
		R16I: TGLenum = 33331;
		R16UI: TGLenum = 33332;
		R32I: TGLenum = 33333;
		R32UI: TGLenum = 33334;
		RG8I: TGLenum = 33335;
		RG8UI: TGLenum = 33336;
		RG16I: TGLenum = 33337;
		RG16UI: TGLenum = 33338;
		RG32I: TGLenum = 33339;
		RG32UI: TGLenum = 33340;
		VERTEX_ARRAY_BINDING: TGLenum = 34229;
		R8_SNORM: TGLenum = 36756;
		RG8_SNORM: TGLenum = 36757;
		RGB8_SNORM: TGLenum = 36758;
		RGBA8_SNORM: TGLenum = 36759;
		SIGNED_NORMALIZED: TGLenum = 36764;
		COPY_READ_BUFFER: TGLenum = 36662;
		COPY_WRITE_BUFFER: TGLenum = 36663;
		COPY_READ_BUFFER_BINDING: TGLenum = 36662;
		COPY_WRITE_BUFFER_BINDING: TGLenum = 36663;
		UNIFORM_BUFFER: TGLenum = 35345;
		UNIFORM_BUFFER_BINDING: TGLenum = 35368;
		UNIFORM_BUFFER_START: TGLenum = 35369;
		UNIFORM_BUFFER_SIZE: TGLenum = 35370;
		MAX_VERTEX_UNIFORM_BLOCKS: TGLenum = 35371;
		MAX_FRAGMENT_UNIFORM_BLOCKS: TGLenum = 35373;
		MAX_COMBINED_UNIFORM_BLOCKS: TGLenum = 35374;
		MAX_UNIFORM_BUFFER_BINDINGS: TGLenum = 35375;
		MAX_UNIFORM_BLOCK_SIZE: TGLenum = 35376;
		MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: TGLenum = 35377;
		MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: TGLenum = 35379;
		UNIFORM_BUFFER_OFFSET_ALIGNMENT: TGLenum = 35380;
		ACTIVE_UNIFORM_BLOCKS: TGLenum = 35382;
		UNIFORM_TYPE: TGLenum = 35383;
		UNIFORM_SIZE: TGLenum = 35384;
		UNIFORM_BLOCK_INDEX: TGLenum = 35386;
		UNIFORM_OFFSET: TGLenum = 35387;
		UNIFORM_ARRAY_STRIDE: TGLenum = 35388;
		UNIFORM_MATRIX_STRIDE: TGLenum = 35389;
		UNIFORM_IS_ROW_MAJOR: TGLenum = 35390;
		UNIFORM_BLOCK_BINDING: TGLenum = 35391;
		UNIFORM_BLOCK_DATA_SIZE: TGLenum = 35392;
		UNIFORM_BLOCK_ACTIVE_UNIFORMS: TGLenum = 35394;
		UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: TGLenum = 35395;
		UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: TGLenum = 35396;
		UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: TGLenum = 35398;
		INVALID_INDEX: TGLenum = 4294967295;
		MAX_VERTEX_OUTPUT_COMPONENTS: TGLenum = 37154;
		MAX_FRAGMENT_INPUT_COMPONENTS: TGLenum = 37157;
		MAX_SERVER_WAIT_TIMEOUT: TGLenum = 37137;
		OBJECT_TYPE: TGLenum = 37138;
		SYNC_CONDITION: TGLenum = 37139;
		SYNC_STATUS: TGLenum = 37140;
		SYNC_FLAGS: TGLenum = 37141;
		SYNC_FENCE: TGLenum = 37142;
		SYNC_GPU_COMMANDS_COMPLETE: TGLenum = 37143;
		UNSIGNALED: TGLenum = 37144;
		SIGNALED: TGLenum = 37145;
		ALREADY_SIGNALED: TGLenum = 37146;
		TIMEOUT_EXPIRED: TGLenum = 37147;
		CONDITION_SATISFIED: TGLenum = 37148;
		WAIT_FAILED: TGLenum = 37149;
		SYNC_FLUSH_COMMANDS_BIT: TGLenum = 1;
		VERTEX_ATTRIB_ARRAY_DIVISOR: TGLenum = 35070;
		ANY_SAMPLES_PASSED: TGLenum = 35887;
		ANY_SAMPLES_PASSED_CONSERVATIVE: TGLenum = 36202;
		SAMPLER_BINDING: TGLenum = 35097;
		RGB10_A2UI: TGLenum = 36975;
		INT_2_10_10_10_REV: TGLenum = 36255;
		TRANSFORM_FEEDBACK: TGLenum = 36386;
		TRANSFORM_FEEDBACK_PAUSED: TGLenum = 36387;
		TRANSFORM_FEEDBACK_ACTIVE: TGLenum = 36388;
		TRANSFORM_FEEDBACK_BINDING: TGLenum = 36389;
		TEXTURE_IMMUTABLE_FORMAT: TGLenum = 37167;
		MAX_ELEMENT_INDEX: TGLenum = 36203;
		TEXTURE_IMMUTABLE_LEVELS: TGLenum = 33503;
		TIMEOUT_IGNORED: TGLint64 = -1;
		MAX_CLIENT_WAIT_TIMEOUT_WEBGL: TGLenum = 37447;
	public
		procedure bufferData(target: TGLenum; size: TGLsizeiptr; usage: TGLenum); overload;
		procedure bufferData(target: TGLenum; srcData: JArrayBuffer; usage: TGLenum); overload;
		procedure bufferData(target: TGLenum; srcData: JArrayBufferView; usage: TGLenum); overload;
		procedure bufferData(target: TGLenum; srcData: JArrayBufferView; usage: TGLenum; srcOffset: TGLuint); overload;
		procedure bufferData(target: TGLenum; srcData: JArrayBufferView; usage: TGLenum; srcOffset: TGLuint; lLength: TGLuint); overload;
		procedure bufferSubData(target: TGLenum; dstByteOffset: TGLintptr; srcData: JArrayBuffer); overload;
		procedure bufferSubData(target: TGLenum; dstByteOffset: TGLintptr; srcData: JArrayBufferView); overload;
		procedure bufferSubData(target: TGLenum; dstByteOffset: TGLintptr; srcData: JArrayBufferView; srcOffset: TGLuint); overload;
		procedure bufferSubData(target: TGLenum; dstByteOffset: TGLintptr; srcData: JArrayBufferView; srcOffset: TGLuint; lLength: TGLuint); overload;
		procedure copyBufferSubData(readTarget, writeTarget: TGLenum; readOffset: TGLintptr; writeOffset: TGLintptr; size: TGLsizeiptr);
		procedure getBufferSubData(target: TGLenum; srcByteOffset: TGLintptr; dstBuffer: JArrayBufferView); overload;
		procedure getBufferSubData(target: TGLenum; srcByteOffset: TGLintptr; dstBuffer: JArrayBufferView; dstOffset: TGLuint); overload;
		procedure getBufferSubData(target: TGLenum; srcByteOffset: TGLintptr; dstBuffer: JArrayBufferView; dstOffset, _length: TGLuint); overload;
		procedure blitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1: TGLint; mask: TGLbitfield; filter: TGLenum);
		procedure framebufferTextureLayer(target, attachment: TGLenum; texture: JWebGLTexture; level: TGLint; layer: TGLint);
		procedure invalidateFramebuffer(target: TGLenum; attachments: array of TGLenum);
		procedure invalidateSubFramebuffer(target: TGLenum; attachments: array of TGLenum; x, y: TGLint; width, height: TGLsizei);
		procedure readBuffer(src: TGLenum);
		function getInternalformatParameter(target: TGLenum; internalformat: TGLenum; pname: TGLenum): Variant;
		procedure renderbufferStorageMultisample(target: TGLenum; samples: TGLsizei; internalformat: TGLenum; width: TGLsizei; height: TGLsizei);
		procedure texStorage2D(target: TGLenum; levels: TGLsizei; internalformat: TGLenum; width: TGLsizei; height: TGLsizei);
		procedure texStorage3D(target: TGLenum; levels: TGLsizei; internalformat: TGLenum; width, height: TGLsizei; depth: TGLsizei);
		procedure texImage2D(target: TGLenum; level, internalformat: TGLint; width, height: TGLsizei; border: TGLint; format, &type: TGLenum; pixels: JArrayBufferView); overload;
		procedure texImage2D(target: TGLenum; level, internalformat: TGLint; format, &type: TGLenum; source: JImageData); overload;
		procedure texImage2D(target: TGLenum; level, internalformat: TGLint; format, &type: TGLenum; source: JHtmlImageElement); overload;
		procedure texImage2D(target: TGLenum; level, internalformat: TGLint; format, &type: TGLenum; source: JHtmlCanvasElement); overload;
		procedure texImage2D(target: TGLenum; level, internalformat: TGLint; format, &type: TGLenum; source: JHtmlVideoElement); overload;
		procedure texImage2D(target: TGLenum; level, internalformat: TGLint; width, height: TGLsizei; border: TGLint; format, &type: TGLenum; pboOffset: TGLintptr); overload;
		procedure texImage2D(target: TGLenum; level, internalformat: TGLint; width, height: TGLsizei; border: TGLint; format, &type: TGLenum; source: JImageData); overload;
		procedure texImage2D(target: TGLenum; level, internalformat: TGLint; width, height: TGLsizei; border: TGLint; format, &type: TGLenum; source: JHtmlImageElement); overload;
		procedure texImage2D(target: TGLenum; level, internalformat: TGLint; width, height: TGLsizei; border: TGLint; format, &type: TGLenum; source: JHtmlCanvasElement); overload;
		procedure texImage2D(target: TGLenum; level, internalformat: TGLint; width, height: TGLsizei; border: TGLint; format, &type: TGLenum; source: JHtmlVideoElement); overload;
		procedure texImage2D(target: TGLenum; level, internalformat: TGLint; width, height: TGLsizei; border: TGLint; format, &type: TGLenum; srcData: JArrayBufferView; srcOffset: TGLuint); overload;
		procedure texImage3D(target: TGLenum; level, internalformat: TGLint; width, height, depth: TGLsizei; border: TGLint; format, &type: TGLenum; pboOffset: TGLintptr); overload;
		procedure texImage3D(target: TGLenum; level, internalformat: TGLint; width, height, depth: TGLsizei; border: TGLint; format, &type: TGLenum; source: JImageData); overload;
		procedure texImage3D(target: TGLenum; level, internalformat: TGLint; width, height, depth: TGLsizei; border: TGLint; format, &type: TGLenum; source: JHtmlImageElement); overload;
		procedure texImage3D(target: TGLenum; level, internalformat: TGLint; width, height, depth: TGLsizei; border: TGLint; format, &type: TGLenum; source: JHtmlCanvasElement); overload;
		procedure texImage3D(target: TGLenum; level, internalformat: TGLint; width, height, depth: TGLsizei; border: TGLint; format, &type: TGLenum; source: JHtmlVideoElement); overload;
		procedure texImage3D(target: TGLenum; level, internalformat: TGLint; width, height, depth: TGLsizei; border: TGLint; format, &type: TGLenum; srcData: JArrayBufferView); overload;
		procedure texImage3D(target: TGLenum; level, internalformat: TGLint; width, height, depth: TGLsizei; border: TGLint; format, &type: TGLenum; srcData: JArrayBufferView; srcOffset: TGLuint); overload;
		procedure texSubImage2D(target: TGLenum; level, xoffset, yoffset: TGLint; width, height: TGLsizei; format, &type: TGLenum; pixels: JArrayBufferView); overload;
		procedure texSubImage2D(target: TGLenum; level, xoffset, yoffset: TGLint; format, &type: TGLenum; source: JImageData); overload;
		procedure texSubImage2D(target: TGLenum; level, xoffset, yoffset: TGLint; format, &type: TGLenum; source: JHtmlImageElement); overload;
		procedure texSubImage2D(target: TGLenum; level, xoffset, yoffset: TGLint; format, &type: TGLenum; source: JHtmlCanvasElement); overload;
		procedure texSubImage2D(target: TGLenum; level, xoffset, yoffset: TGLint; format, &type: TGLenum; source: JHtmlVideoElement); overload;
		procedure texSubImage2D(target: TGLenum; level, xoffset, yoffset: TGLint; width, height: TGLsizei; format, &type: TGLenum; pboOffset: TGLintptr); overload;
		procedure texSubImage2D(target: TGLenum; level, xoffset, yoffset: TGLint; width, height: TGLsizei; format, &type: TGLenum; source: JImageData); overload;
		procedure texSubImage2D(target: TGLenum; level, xoffset, yoffset: TGLint; width, height: TGLsizei; format, &type: TGLenum; source: JHtmlImageElement); overload;
		procedure texSubImage2D(target: TGLenum; level, xoffset, yoffset: TGLint; width, height: TGLsizei; format, &type: TGLenum; source: JHtmlCanvasElement); overload;
		procedure texSubImage2D(target: TGLenum; level, xoffset, yoffset: TGLint; width, height: TGLsizei; format, &type: TGLenum; source: JHtmlVideoElement); overload;
		procedure texSubImage2D(target: TGLenum; level, xoffset, yoffset: TGLint; width, height: TGLsizei; format, &type: TGLenum; srcData: JArrayBufferView; srcOffset: TGLuint); overload;
		procedure texSubImage3D(target: TGLenum; level, xoffset, yoffset, zoffset: TGLint; width, height: TGLsizei; depth: TGLsizei; format, &type: TGLenum; pboOffset: TGLintptr); overload;
		procedure texSubImage3D(target: TGLenum; level, xoffset, yoffset, zoffset: TGLint; width, height: TGLsizei; depth: TGLsizei; format, &type: TGLenum; source: JImageData); overload;
		procedure texSubImage3D(target: TGLenum; level, xoffset, yoffset, zoffset: TGLint; width, height: TGLsizei; depth: TGLsizei; format, &type: TGLenum; source: JHtmlImageElement); overload;
		procedure texSubImage3D(target: TGLenum; level, xoffset, yoffset, zoffset: TGLint; width, height: TGLsizei; depth: TGLsizei; format, &type: TGLenum; source: JHtmlCanvasElement); overload;
		procedure texSubImage3D(target: TGLenum; level, xoffset, yoffset, zoffset: TGLint; width, height: TGLsizei; depth: TGLsizei; format, &type: TGLenum; source: JHtmlVideoElement); overload;
		procedure texSubImage3D(target: TGLenum; level, xoffset, yoffset, zoffset: TGLint; width, height: TGLsizei; depth: TGLsizei; format, &type: TGLenum; srcData: JArrayBufferView); overload;
		procedure texSubImage3D(target: TGLenum; level, xoffset, yoffset, zoffset: TGLint; width, height: TGLsizei; depth: TGLsizei; format, &type: TGLenum; srcData: JArrayBufferView; srcOffset: TGLuint); overload;
		procedure copyTexSubImage3D(target: TGLenum; level, xoffset, yoffset, zoffset: TGLint; x, y: TGLint; width: TGLsizei; height: TGLsizei);
		procedure compressedTexImage2D(target: TGLenum; level: TGLint; internalformat: TGLenum; width, height: TGLsizei; border: TGLint; imageSize: TGLsizei; offset: TGLintptr); overload;
		procedure compressedTexImage2D(target: TGLenum; level: TGLint; internalformat: TGLenum; width, height: TGLsizei; border: TGLint; srcData: JArrayBufferView); overload;
		procedure compressedTexImage2D(target: TGLenum; level: TGLint; internalformat: TGLenum; width, height: TGLsizei; border: TGLint; srcData: JArrayBufferView; srcOffset: TGLuint); overload;
		procedure compressedTexImage2D(target: TGLenum; level: TGLint; internalformat: TGLenum; width, height: TGLsizei; border: TGLint; srcData: JArrayBufferView; srcOffset, srcLengthOverride: TGLuint); overload;
		procedure compressedTexImage3D(target: TGLenum; level: TGLint; internalformat: TGLenum; width, height, depth: TGLsizei; border: TGLint; imageSize: TGLsizei; offset: TGLintptr); overload;
		procedure compressedTexImage3D(target: TGLenum; level: TGLint; internalformat: TGLenum; width, height, depth: TGLsizei; border: TGLint; srcData: JArrayBufferView); overload;
		procedure compressedTexImage3D(target: TGLenum; level: TGLint; internalformat: TGLenum; width, height, depth: TGLsizei; border: TGLint; srcData: JArrayBufferView; srcOffset: TGLuint); overload;
		procedure compressedTexImage3D(target: TGLenum; level: TGLint; internalformat: TGLenum; width, height, depth: TGLsizei; border: TGLint; srcData: JArrayBufferView; srcOffset, srcLengthOverride: TGLuint); overload;
		procedure compressedTexSubImage2D(target: TGLenum; level, xoffset, yoffset: TGLint; width, height: TGLsizei; format: TGLenum; imageSize: TGLsizei; offset: TGLintptr); overload;
		procedure compressedTexSubImage2D(target: TGLenum; level, xoffset, yoffset: TGLint; width, height: TGLsizei; format: TGLenum; srcData: JArrayBufferView); overload;
		procedure compressedTexSubImage2D(target: TGLenum; level, xoffset, yoffset: TGLint; width, height: TGLsizei; format: TGLenum; srcData: JArrayBufferView; srcOffset: TGLuint); overload;
		procedure compressedTexSubImage2D(target: TGLenum; level, xoffset, yoffset: TGLint; width, height: TGLsizei; format: TGLenum; srcData: JArrayBufferView; srcOffset, srcLengthOverride: TGLuint); overload;
		procedure compressedTexSubImage3D(target: TGLenum; level, xoffset, yoffset, zoffset: TGLint; width, height: TGLsizei; depth: TGLsizei; format: TGLenum; imageSize: TGLsizei; offset: TGLintptr); overload;
		procedure compressedTexSubImage3D(target: TGLenum; level, xoffset, yoffset, zoffset: TGLint; width, height: TGLsizei; depth: TGLsizei; format: TGLenum; srcData: JArrayBufferView); overload;
		procedure compressedTexSubImage3D(target: TGLenum; level, xoffset, yoffset, zoffset: TGLint; width, height: TGLsizei; depth: TGLsizei; format: TGLenum; srcData: JArrayBufferView; srcOffset: TGLuint); overload;
		procedure compressedTexSubImage3D(target: TGLenum; level, xoffset, yoffset, zoffset: TGLint; width, height: TGLsizei; depth: TGLsizei; format: TGLenum; srcData: JArrayBufferView; srcOffset, srcLengthOverride: TGLuint); overload;
		function getFragDataLocation(&program: JWebGLProgram; &name: String): TGLint; { WebGLHandlesContextLoss }
		procedure uniform1ui(location: JWebGLUniformLocation; v0: TGLuint);
		procedure uniform2ui(location: JWebGLUniformLocation; v0, v1: TGLuint);
		procedure uniform3ui(location: JWebGLUniformLocation; v0, v1, v2: TGLuint);
		procedure uniform4ui(location: JWebGLUniformLocation; v0, v1, v2, v3: TGLuint);
		procedure uniform1fv(location: JWebGLUniformLocation; data: JFloat32Array); overload;
		procedure uniform1fv(location: JWebGLUniformLocation; data: array of Float); overload;
		procedure uniform1fv(location: JWebGLUniformLocation; data: JFloat32Array; srcOffset: TGLuint); overload;
		procedure uniform1fv(location: JWebGLUniformLocation; data: array of Float; srcOffset: TGLuint); overload;
		procedure uniform1fv(location: JWebGLUniformLocation; data: JFloat32Array; srcOffset, srcLength: TGLuint); overload;
		procedure uniform1fv(location: JWebGLUniformLocation; data: array of Float; srcOffset, srcLength: TGLuint); overload;
		procedure uniform2fv(location: JWebGLUniformLocation; data: JFloat32Array); overload;
		procedure uniform2fv(location: JWebGLUniformLocation; data: array of Float); overload;
		procedure uniform2fv(location: JWebGLUniformLocation; data: JFloat32Array; srcOffset: TGLuint); overload;
		procedure uniform2fv(location: JWebGLUniformLocation; data: array of Float; srcOffset: TGLuint); overload;
		procedure uniform2fv(location: JWebGLUniformLocation; data: JFloat32Array; srcOffset, srcLength: TGLuint); overload;
		procedure uniform2fv(location: JWebGLUniformLocation; data: array of Float; srcOffset, srcLength: TGLuint); overload;
		procedure uniform3fv(location: JWebGLUniformLocation; data: JFloat32Array); overload;
		procedure uniform3fv(location: JWebGLUniformLocation; data: array of Float); overload;
		procedure uniform3fv(location: JWebGLUniformLocation; data: JFloat32Array; srcOffset: TGLuint); overload;
		procedure uniform3fv(location: JWebGLUniformLocation; data: array of Float; srcOffset: TGLuint); overload;
		procedure uniform3fv(location: JWebGLUniformLocation; data: JFloat32Array; srcOffset, srcLength: TGLuint); overload;
		procedure uniform3fv(location: JWebGLUniformLocation; data: array of Float; srcOffset, srcLength: TGLuint); overload;
		procedure uniform4fv(location: JWebGLUniformLocation; data: JFloat32Array); overload;
		procedure uniform4fv(location: JWebGLUniformLocation; data: array of Float); overload;
		procedure uniform4fv(location: JWebGLUniformLocation; data: JFloat32Array; srcOffset: TGLuint); overload;
		procedure uniform4fv(location: JWebGLUniformLocation; data: array of Float; srcOffset: TGLuint); overload;
		procedure uniform4fv(location: JWebGLUniformLocation; data: JFloat32Array; srcOffset, srcLength: TGLuint); overload;
		procedure uniform4fv(location: JWebGLUniformLocation; data: array of Float; srcOffset, srcLength: TGLuint); overload;
		procedure uniform1iv(location: JWebGLUniformLocation; data: JInt32Array); overload;
		procedure uniform1iv(location: JWebGLUniformLocation; data: array of Integer); overload;
		procedure uniform1iv(location: JWebGLUniformLocation; data: JInt32Array; srcOffset: TGLuint); overload;
		procedure uniform1iv(location: JWebGLUniformLocation; data: array of Integer; srcOffset: TGLuint); overload;
		procedure uniform1iv(location: JWebGLUniformLocation; data: JInt32Array; srcOffset, srcLength: TGLuint); overload;
		procedure uniform1iv(location: JWebGLUniformLocation; data: array of Integer; srcOffset, srcLength: TGLuint); overload;
		procedure uniform2iv(location: JWebGLUniformLocation; data: JInt32Array); overload;
		procedure uniform2iv(location: JWebGLUniformLocation; data: array of Integer); overload;
		procedure uniform2iv(location: JWebGLUniformLocation; data: JInt32Array; srcOffset: TGLuint); overload;
		procedure uniform2iv(location: JWebGLUniformLocation; data: array of Integer; srcOffset: TGLuint); overload;
		procedure uniform2iv(location: JWebGLUniformLocation; data: JInt32Array; srcOffset, srcLength: TGLuint); overload;
		procedure uniform2iv(location: JWebGLUniformLocation; data: array of Integer; srcOffset, srcLength: TGLuint); overload;
		procedure uniform3iv(location: JWebGLUniformLocation; data: JInt32Array); overload;
		procedure uniform3iv(location: JWebGLUniformLocation; data: array of Integer); overload;
		procedure uniform3iv(location: JWebGLUniformLocation; data: JInt32Array; srcOffset: TGLuint); overload;
		procedure uniform3iv(location: JWebGLUniformLocation; data: array of Integer; srcOffset: TGLuint); overload;
		procedure uniform3iv(location: JWebGLUniformLocation; data: JInt32Array; srcOffset, srcLength: TGLuint); overload;
		procedure uniform3iv(location: JWebGLUniformLocation; data: array of Integer; srcOffset, srcLength: TGLuint); overload;
		procedure uniform4iv(location: JWebGLUniformLocation; data: JInt32Array); overload;
		procedure uniform4iv(location: JWebGLUniformLocation; data: array of Integer); overload;
		procedure uniform4iv(location: JWebGLUniformLocation; data: JInt32Array; srcOffset: TGLuint); overload;
		procedure uniform4iv(location: JWebGLUniformLocation; data: array of Integer; srcOffset: TGLuint); overload;
		procedure uniform4iv(location: JWebGLUniformLocation; data: JInt32Array; srcOffset, srcLength: TGLuint); overload;
		procedure uniform4iv(location: JWebGLUniformLocation; data: array of Integer; srcOffset, srcLength: TGLuint); overload;
		procedure uniform1uiv(location: JWebGLUniformLocation; data: JUint32Array); overload;
		procedure uniform1uiv(location: JWebGLUniformLocation; data: array of Integer); overload;
		procedure uniform1uiv(location: JWebGLUniformLocation; data: JUint32Array; srcOffset: TGLuint); overload;
		procedure uniform1uiv(location: JWebGLUniformLocation; data: array of Integer; srcOffset: TGLuint); overload;
		procedure uniform1uiv(location: JWebGLUniformLocation; data: JUint32Array; srcOffset: TGLuint; srcLength: TGLuint); overload;
		procedure uniform1uiv(location: JWebGLUniformLocation; data: array of Integer; srcOffset: TGLuint; srcLength: TGLuint); overload;
		procedure uniform2uiv(location: JWebGLUniformLocation; data: JUint32Array); overload;
		procedure uniform2uiv(location: JWebGLUniformLocation; data: array of Integer); overload;
		procedure uniform2uiv(location: JWebGLUniformLocation; data: JUint32Array; srcOffset: TGLuint); overload;
		procedure uniform2uiv(location: JWebGLUniformLocation; data: array of Integer; srcOffset: TGLuint); overload;
		procedure uniform2uiv(location: JWebGLUniformLocation; data: JUint32Array; srcOffset: TGLuint; srcLength: TGLuint); overload;
		procedure uniform2uiv(location: JWebGLUniformLocation; data: array of Integer; srcOffset: TGLuint; srcLength: TGLuint); overload;
		procedure uniform3uiv(location: JWebGLUniformLocation; data: JUint32Array); overload;
		procedure uniform3uiv(location: JWebGLUniformLocation; data: array of Integer); overload;
		procedure uniform3uiv(location: JWebGLUniformLocation; data: JUint32Array; srcOffset: TGLuint); overload;
		procedure uniform3uiv(location: JWebGLUniformLocation; data: array of Integer; srcOffset: TGLuint); overload;
		procedure uniform3uiv(location: JWebGLUniformLocation; data: JUint32Array; srcOffset: TGLuint; srcLength: TGLuint); overload;
		procedure uniform3uiv(location: JWebGLUniformLocation; data: array of Integer; srcOffset: TGLuint; srcLength: TGLuint); overload;
		procedure uniform4uiv(location: JWebGLUniformLocation; data: JUint32Array); overload;
		procedure uniform4uiv(location: JWebGLUniformLocation; data: array of Integer); overload;
		procedure uniform4uiv(location: JWebGLUniformLocation; data: JUint32Array; srcOffset: TGLuint); overload;
		procedure uniform4uiv(location: JWebGLUniformLocation; data: array of Integer; srcOffset: TGLuint); overload;
		procedure uniform4uiv(location: JWebGLUniformLocation; data: JUint32Array; srcOffset: TGLuint; srcLength: TGLuint); overload;
		procedure uniform4uiv(location: JWebGLUniformLocation; data: array of Integer; srcOffset: TGLuint; srcLength: TGLuint); overload;
		procedure uniformMatrix2fv(location: JWebGLUniformLocation; transpose: TGLboolean; data: JFloat32Array; srcOffset: TGLuint; srcLength: TGLuint); overload;
		procedure uniformMatrix2fv(location: JWebGLUniformLocation; transpose: TGLboolean; data: array of Float; srcOffset: TGLuint; srcLength: TGLuint); overload;
		procedure uniformMatrix3x2fv(location: JWebGLUniformLocation; transpose: TGLboolean; data: JFloat32Array; srcOffset: TGLuint = 0; srcLength: TGLuint = 0); overload;
		procedure uniformMatrix3x2fv(location: JWebGLUniformLocation; transpose: TGLboolean; data: array of Float; srcOffset: TGLuint = 0; srcLength: TGLuint = 0); overload;
		procedure uniformMatrix4x2fv(location: JWebGLUniformLocation; transpose: TGLboolean; data: JFloat32Array; srcOffset: TGLuint = 0; srcLength: TGLuint = 0); overload;
		procedure uniformMatrix4x2fv(location: JWebGLUniformLocation; transpose: TGLboolean; data: array of Float; srcOffset: TGLuint = 0; srcLength: TGLuint = 0); overload;
		procedure uniformMatrix2x3fv(location: JWebGLUniformLocation; transpose: TGLboolean; data: JFloat32Array; srcOffset: TGLuint = 0; srcLength: TGLuint = 0); overload;
		procedure uniformMatrix2x3fv(location: JWebGLUniformLocation; transpose: TGLboolean; data: array of Float; srcOffset: TGLuint = 0; srcLength: TGLuint = 0); overload;
		procedure uniformMatrix3fv(location: JWebGLUniformLocation; transpose: TGLboolean; data: JFloat32Array; srcOffset: TGLuint = 0; srcLength: TGLuint = 0); overload;
		procedure uniformMatrix3fv(location: JWebGLUniformLocation; transpose: TGLboolean; data: array of Float; srcOffset: TGLuint = 0; srcLength: TGLuint = 0); overload;
		procedure uniformMatrix4x3fv(location: JWebGLUniformLocation; transpose: TGLboolean; data: JFloat32Array; srcOffset: TGLuint = 0; srcLength: TGLuint = 0); overload;
		procedure uniformMatrix4x3fv(location: JWebGLUniformLocation; transpose: TGLboolean; data: array of Float; srcOffset: TGLuint = 0; srcLength: TGLuint = 0); overload;
		procedure uniformMatrix2x4fv(location: JWebGLUniformLocation; transpose: TGLboolean; data: JFloat32Array; srcOffset: TGLuint = 0; srcLength: TGLuint = 0); overload;
		procedure uniformMatrix2x4fv(location: JWebGLUniformLocation; transpose: TGLboolean; data: array of Float; srcOffset: TGLuint = 0; srcLength: TGLuint = 0); overload;
		procedure uniformMatrix3x4fv(location: JWebGLUniformLocation; transpose: TGLboolean; data: JFloat32Array; srcOffset: TGLuint = 0; srcLength: TGLuint = 0); overload;
		procedure uniformMatrix3x4fv(location: JWebGLUniformLocation; transpose: TGLboolean; data: array of Float; srcOffset: TGLuint = 0; srcLength: TGLuint = 0); overload;
		procedure uniformMatrix4fv(location: JWebGLUniformLocation; transpose: TGLboolean; data: JFloat32Array; srcOffset: TGLuint = 0; srcLength: TGLuint = 0); overload;
		procedure uniformMatrix4fv(location: JWebGLUniformLocation; transpose: TGLboolean; data: array of Float; srcOffset: TGLuint = 0; srcLength: TGLuint = 0); overload;
		procedure vertexAttribI4i(&index: TGLuint; x, y, z, w: TGLint);
		procedure vertexAttribI4iv(&index: TGLuint; values: JInt32Array); overload;
		procedure vertexAttribI4iv(&index: TGLuint; values: array of Integer); overload;
		procedure vertexAttribI4ui(&index, x, y, z, w: TGLuint);
		procedure vertexAttribI4uiv(&index: TGLuint; values: JUint32Array); overload;
		procedure vertexAttribI4uiv(&index: TGLuint; values: array of Integer); overload;
		procedure vertexAttribIPointer(&index: TGLuint; size: TGLint; &type: TGLenum; stride: TGLsizei; offset: TGLintptr);
		procedure vertexAttribDivisor(&index: TGLuint; divisor: TGLuint);
		procedure drawArraysInstanced(mode: TGLenum; first: TGLint; count: TGLsizei; instanceCount: TGLsizei);
		procedure drawElementsInstanced(mode: TGLenum; count: TGLsizei; &type: TGLenum; offset: TGLintptr; instanceCount: TGLsizei);
		procedure drawRangeElements(mode: TGLenum; start: TGLuint; &end: TGLuint; count: TGLsizei; &type: TGLenum; offset: TGLintptr);
		procedure readPixels(x, y: TGLint; width, height: TGLsizei; format, &type: TGLenum; dstData: JArrayBufferView); overload;
		procedure readPixels(x, y: TGLint; width, height: TGLsizei; format, &type: TGLenum; offset: TGLintptr); overload;
		procedure readPixels(x, y: TGLint; width, height: TGLsizei; format, &type: TGLenum; dstData: JArrayBufferView; dstOffset: TGLuint); overload;
		procedure drawBuffers(buffers: array of TGLenum);
		procedure clearBufferfv(buffer: TGLenum; drawbuffer: TGLint; values: JFloat32Array); overload;
		procedure clearBufferfv(buffer: TGLenum; drawbuffer: TGLint; values: JFloat32Array; srcOffset: TGLuint); overload;
		procedure clearBufferfv(buffer: TGLenum; drawbuffer: TGLint; values: array of Float); overload;
		procedure clearBufferfv(buffer: TGLenum; drawbuffer: TGLint; values: array of Float; srcOffset: TGLuint); overload;
		procedure clearBufferiv(buffer: TGLenum; drawbuffer: TGLint; values: JInt32Array); overload;
		procedure clearBufferiv(buffer: TGLenum; drawbuffer: TGLint; values: JInt32Array; srcOffset: TGLuint); overload;
		procedure clearBufferiv(buffer: TGLenum; drawbuffer: TGLint; values: array of Integer); overload;
		procedure clearBufferiv(buffer: TGLenum; drawbuffer: TGLint; values: array of Integer; srcOffset: TGLuint); overload;
		procedure clearBufferuiv(buffer: TGLenum; drawbuffer: TGLint; values: JUint32Array); overload;
		procedure clearBufferuiv(buffer: TGLenum; drawbuffer: TGLint; values: JUint32Array; srcOffset: TGLuint); overload;
		procedure clearBufferuiv(buffer: TGLenum; drawbuffer: TGLint; values: array of Integer); overload;
		procedure clearBufferuiv(buffer: TGLenum; drawbuffer: TGLint; values: array of Integer; srcOffset: TGLuint); overload;
		procedure clearBufferfi(buffer: TGLenum; drawbuffer: TGLint; depth: TGLfloat; stencil: TGLint);
		function createQuery: JWebGLQuery;
		procedure deleteQuery(query: JWebGLQuery);
		function isQuery(query: JWebGLQuery): TGLboolean; { WebGLHandlesContextLoss }
		procedure beginQuery(target: TGLenum; query: JWebGLQuery);
		procedure endQuery(target: TGLenum);
		function getQuery(target: TGLenum; pname: TGLenum): JWebGLQuery;
		function getQueryParameter(query: JWebGLQuery; pname: TGLenum): Variant;
		function createSampler: JWebGLSampler;
		procedure deleteSampler(sampler: JWebGLSampler);
		function isSampler(sampler: JWebGLSampler): TGLboolean; { WebGLHandlesContextLoss }
		procedure bindSampler(&unit: TGLuint; sampler: JWebGLSampler);
		procedure samplerParameteri(sampler: JWebGLSampler; pname: TGLenum; param: TGLint);
		procedure samplerParameterf(sampler: JWebGLSampler; pname: TGLenum; param: TGLfloat);
		function getSamplerParameter(sampler: JWebGLSampler; pname: TGLenum): Variant;
		function fenceSync(condition: TGLenum; &flags: TGLbitfield): JWebGLSync;
		function isSync(sync: JWebGLSync): TGLboolean; { WebGLHandlesContextLoss }
		procedure deleteSync(sync: JWebGLSync);
		function clientWaitSync(sync: JWebGLSync; &flags: TGLbitfield; timeout: TGLuint64): TGLenum;
		procedure waitSync(sync: JWebGLSync; &flags: TGLbitfield; timeout: TGLint64);
		function getSyncParameter(sync: JWebGLSync; pname: TGLenum): Variant;
		function createTransformFeedback: JWebGLTransformFeedback;
		procedure deleteTransformFeedback(tf: JWebGLTransformFeedback);
		function isTransformFeedback(tf: JWebGLTransformFeedback): TGLboolean; { WebGLHandlesContextLoss }
		procedure bindTransformFeedback(target: TGLenum; tf: JWebGLTransformFeedback);
		procedure beginTransformFeedback(primitiveMode: TGLenum);
		procedure endTransformFeedback;
		procedure transformFeedbackVaryings(&program: JWebGLProgram; varyings: array of String; bufferMode: TGLenum);
		function getTransformFeedbackVarying(&program: JWebGLProgram; &index: TGLuint): JWebGLActiveInfo;
		procedure pauseTransformFeedback;
		procedure resumeTransformFeedback;
		procedure bindBufferBase(target: TGLenum; &index: TGLuint; buffer: JWebGLBuffer);
		procedure bindBufferRange(target: TGLenum; &index: TGLuint; buffer: JWebGLBuffer; offset: TGLintptr; size: TGLsizeiptr);
		function getIndexedParameter(target: TGLenum; &index: TGLuint): Variant;
		function getUniformIndices(&program: JWebGLProgram; uniformNames: array of String): array of TGLuint;
		function getActiveUniforms(&program: JWebGLProgram; uniformIndices: array of TGLuint; pname: TGLenum): Variant;
		function getUniformBlockIndex(&program: JWebGLProgram; uniformBlockName: String): TGLuint;
		function getActiveUniformBlockParameter(&program: JWebGLProgram; uniformBlockIndex: TGLuint; pname: TGLenum): Variant;
		function getActiveUniformBlockName(&program: JWebGLProgram; uniformBlockIndex: TGLuint): String;
		procedure uniformBlockBinding(&program: JWebGLProgram; uniformBlockIndex: TGLuint; uniformBlockBinding: TGLuint);
		function createVertexArray: JWebGLVertexArrayObject;
		procedure deleteVertexArray(vertexArray: JWebGLVertexArrayObject);
		function isVertexArray(vertexArray: JWebGLVertexArrayObject): TGLboolean; { WebGLHandlesContextLoss }
		procedure bindVertexArray(&array: JWebGLVertexArrayObject);
	end;

	JWebGL2RenderingContext = class external 'WebGL2RenderingContext'
	end;

