unit Khronos.WebGL;

interface

uses
  ECMA.TypedArray, W3C.DOM4, W3C.HTML5;

type
	TGLenum = Integer;
	TGLboolean = Boolean;
	TGLbitfield = Integer;
	TGLbyte = Integer;
	TGLshort = Integer;
	TGLint = Integer;
	TGLsizei = Integer;
	TGLintptr = Integer;
	TGLsizeiptr = Integer;
	TGLubyte = Integer;
	TGLushort = Integer;
	TGLuint = Integer;
	TGLfloat = Float;
	TGLclampf = Float;
	JWebGLContextAttributes = class external 'WebGLContextAttributes'
	public
		alpha: TGLboolean;
		depth: TGLboolean;
		stencil: TGLboolean;
		antialias: TGLboolean;
		premultipliedAlpha: TGLboolean;
		preserveDrawingBuffer: TGLboolean;
		preferLowPowerToHighPerformance: TGLboolean;
		failIfMajorPerformanceCaveat: TGLboolean;
	end;

	JWebGLObject = class external 'WebGLObject';
	JWebGLBuffer = class external 'WebGLBuffer' (JWebGLObject);
	JWebGLFramebuffer = class external 'WebGLFramebuffer' (JWebGLObject);
	JWebGLProgram = class external 'WebGLProgram' (JWebGLObject);
	JWebGLRenderbuffer = class external 'WebGLRenderbuffer' (JWebGLObject);
	JWebGLShader = class external 'WebGLShader' (JWebGLObject);
	JWebGLTexture = class external 'WebGLTexture' (JWebGLObject);
	JWebGLUniformLocation = class external 'WebGLUniformLocation';

	JWebGLActiveInfo = class external 'WebGLActiveInfo'
	public
		size: TGLint;
		&type: TGLenum;
		name: String;
	end;

	JWebGLShaderPrecisionFormat = class external 'WebGLShaderPrecisionFormat'
	public
		rangeMin: TGLint;
		rangeMax: TGLint;
		precision: TGLint;
	end;

	TBufferDataSource = Variant; // TODO
	TTexImageSource = Variant; // TODO
	TVertexAttribFVSource = Variant; // TODO
	// NoInterfaceObject
	JWebGLRenderingContextBase = class external 'WebGLRenderingContextBase'
	const 
		DEPTH_BUFFER_BIT: TGLenum = 256;
		STENCIL_BUFFER_BIT: TGLenum = 1024;
		COLOR_BUFFER_BIT: TGLenum = 16384;
		POINTS: TGLenum = 0;
		LINES: TGLenum = 1;
		LINE_LOOP: TGLenum = 2;
		LINE_STRIP: TGLenum = 3;
		TRIANGLES: TGLenum = 4;
		TRIANGLE_STRIP: TGLenum = 5;
		TRIANGLE_FAN: TGLenum = 6;
		ZERO: TGLenum = 0;
		ONE: TGLenum = 1;
		SRC_COLOR: TGLenum = 768;
		ONE_MINUS_SRC_COLOR: TGLenum = 769;
		SRC_ALPHA: TGLenum = 770;
		ONE_MINUS_SRC_ALPHA: TGLenum = 771;
		DST_ALPHA: TGLenum = 772;
		ONE_MINUS_DST_ALPHA: TGLenum = 773;
		DST_COLOR: TGLenum = 774;
		ONE_MINUS_DST_COLOR: TGLenum = 775;
		SRC_ALPHA_SATURATE: TGLenum = 776;
		FUNC_ADD: TGLenum = 32774;
		BLEND_EQUATION: TGLenum = 32777;
		BLEND_EQUATION_RGB: TGLenum = 32777;
		BLEND_EQUATION_ALPHA: TGLenum = 34877;
		FUNC_SUBTRACT: TGLenum = 32778;
		FUNC_REVERSE_SUBTRACT: TGLenum = 32779;
		BLEND_DST_RGB: TGLenum = 32968;
		BLEND_SRC_RGB: TGLenum = 32969;
		BLEND_DST_ALPHA: TGLenum = 32970;
		BLEND_SRC_ALPHA: TGLenum = 32971;
		CONSTANT_COLOR: TGLenum = 32769;
		ONE_MINUS_CONSTANT_COLOR: TGLenum = 32770;
		CONSTANT_ALPHA: TGLenum = 32771;
		ONE_MINUS_CONSTANT_ALPHA: TGLenum = 32772;
		BLEND_COLOR: TGLenum = 32773;
		ARRAY_BUFFER: TGLenum = 34962;
		ELEMENT_ARRAY_BUFFER: TGLenum = 34963;
		ARRAY_BUFFER_BINDING: TGLenum = 34964;
		ELEMENT_ARRAY_BUFFER_BINDING: TGLenum = 34965;
		STREAM_DRAW: TGLenum = 35040;
		STATIC_DRAW: TGLenum = 35044;
		DYNAMIC_DRAW: TGLenum = 35048;
		BUFFER_SIZE: TGLenum = 34660;
		BUFFER_USAGE: TGLenum = 34661;
		CURRENT_VERTEX_ATTRIB: TGLenum = 34342;
		FRONT: TGLenum = 1028;
		BACK: TGLenum = 1029;
		FRONT_AND_BACK: TGLenum = 1032;
		CULL_FACE: TGLenum = 2884;
		BLEND: TGLenum = 3042;
		DITHER: TGLenum = 3024;
		STENCIL_TEST: TGLenum = 2960;
		DEPTH_TEST: TGLenum = 2929;
		SCISSOR_TEST: TGLenum = 3089;
		POLYGON_OFFSET_FILL: TGLenum = 32823;
		SAMPLE_ALPHA_TO_COVERAGE: TGLenum = 32926;
		SAMPLE_COVERAGE: TGLenum = 32928;
		NO_ERROR: TGLenum = 0;
		INVALID_ENUM: TGLenum = 1280;
		INVALID_VALUE: TGLenum = 1281;
		INVALID_OPERATION: TGLenum = 1282;
		OUT_OF_MEMORY: TGLenum = 1285;
		CW: TGLenum = 2304;
		CCW: TGLenum = 2305;
		LINE_WIDTH: TGLenum = 2849;
		ALIASED_POINT_SIZE_RANGE: TGLenum = 33901;
		ALIASED_LINE_WIDTH_RANGE: TGLenum = 33902;
		CULL_FACE_MODE: TGLenum = 2885;
		FRONT_FACE: TGLenum = 2886;
		DEPTH_RANGE: TGLenum = 2928;
		DEPTH_WRITEMASK: TGLenum = 2930;
		DEPTH_CLEAR_VALUE: TGLenum = 2931;
		DEPTH_FUNC: TGLenum = 2932;
		STENCIL_CLEAR_VALUE: TGLenum = 2961;
		STENCIL_FUNC: TGLenum = 2962;
		STENCIL_FAIL: TGLenum = 2964;
		STENCIL_PASS_DEPTH_FAIL: TGLenum = 2965;
		STENCIL_PASS_DEPTH_PASS: TGLenum = 2966;
		STENCIL_REF: TGLenum = 2967;
		STENCIL_VALUE_MASK: TGLenum = 2963;
		STENCIL_WRITEMASK: TGLenum = 2968;
		STENCIL_BACK_FUNC: TGLenum = 34816;
		STENCIL_BACK_FAIL: TGLenum = 34817;
		STENCIL_BACK_PASS_DEPTH_FAIL: TGLenum = 34818;
		STENCIL_BACK_PASS_DEPTH_PASS: TGLenum = 34819;
		STENCIL_BACK_REF: TGLenum = 36003;
		STENCIL_BACK_VALUE_MASK: TGLenum = 36004;
		STENCIL_BACK_WRITEMASK: TGLenum = 36005;
		VIEWPORT: TGLenum = 2978;
		SCISSOR_BOX: TGLenum = 3088;
		COLOR_CLEAR_VALUE: TGLenum = 3106;
		COLOR_WRITEMASK: TGLenum = 3107;
		UNPACK_ALIGNMENT: TGLenum = 3317;
		PACK_ALIGNMENT: TGLenum = 3333;
		MAX_TEXTURE_SIZE: TGLenum = 3379;
		MAX_VIEWPORT_DIMS: TGLenum = 3386;
		SUBPIXEL_BITS: TGLenum = 3408;
		RED_BITS: TGLenum = 3410;
		GREEN_BITS: TGLenum = 3411;
		BLUE_BITS: TGLenum = 3412;
		ALPHA_BITS: TGLenum = 3413;
		DEPTH_BITS: TGLenum = 3414;
		STENCIL_BITS: TGLenum = 3415;
		POLYGON_OFFSET_UNITS: TGLenum = 10752;
		POLYGON_OFFSET_FACTOR: TGLenum = 32824;
		TEXTURE_BINDING_2D: TGLenum = 32873;
		SAMPLE_BUFFERS: TGLenum = 32936;
		SAMPLES: TGLenum = 32937;
		SAMPLE_COVERAGE_VALUE: TGLenum = 32938;
		SAMPLE_COVERAGE_INVERT: TGLenum = 32939;
		COMPRESSED_TEXTURE_FORMATS: TGLenum = 34467;
		DONT_CARE: TGLenum = 4352;
		FASTEST: TGLenum = 4353;
		NICEST: TGLenum = 4354;
		GENERATE_MIPMAP_HINT: TGLenum = 33170;
		BYTE: TGLenum = 5120;
		UNSIGNED_BYTE: TGLenum = 5121;
		SHORT: TGLenum = 5122;
		UNSIGNED_SHORT: TGLenum = 5123;
		INT: TGLenum = 5124;
		UNSIGNED_INT: TGLenum = 5125;
		FLOAT: TGLenum = 5126;
		DEPTH_COMPONENT: TGLenum = 6402;
		ALPHA: TGLenum = 6406;
		RGB: TGLenum = 6407;
		RGBA: TGLenum = 6408;
		LUMINANCE: TGLenum = 6409;
		LUMINANCE_ALPHA: TGLenum = 6410;
		UNSIGNED_SHORT_4_4_4_4: TGLenum = 32819;
		UNSIGNED_SHORT_5_5_5_1: TGLenum = 32820;
		UNSIGNED_SHORT_5_6_5: TGLenum = 33635;
		FRAGMENT_SHADER: TGLenum = 35632;
		VERTEX_SHADER: TGLenum = 35633;
		MAX_VERTEX_ATTRIBS: TGLenum = 34921;
		MAX_VERTEX_UNIFORM_VECTORS: TGLenum = 36347;
		MAX_VARYING_VECTORS: TGLenum = 36348;
		MAX_COMBINED_TEXTURE_IMAGE_UNITS: TGLenum = 35661;
		MAX_VERTEX_TEXTURE_IMAGE_UNITS: TGLenum = 35660;
		MAX_TEXTURE_IMAGE_UNITS: TGLenum = 34930;
		MAX_FRAGMENT_UNIFORM_VECTORS: TGLenum = 36349;
		SHADER_TYPE: TGLenum = 35663;
		DELETE_STATUS: TGLenum = 35712;
		LINK_STATUS: TGLenum = 35714;
		VALIDATE_STATUS: TGLenum = 35715;
		ATTACHED_SHADERS: TGLenum = 35717;
		ACTIVE_UNIFORMS: TGLenum = 35718;
		ACTIVE_ATTRIBUTES: TGLenum = 35721;
		SHADING_LANGUAGE_VERSION: TGLenum = 35724;
		CURRENT_PROGRAM: TGLenum = 35725;
		NEVER: TGLenum = 512;
		LESS: TGLenum = 513;
		EQUAL: TGLenum = 514;
		LEQUAL: TGLenum = 515;
		GREATER: TGLenum = 516;
		NOTEQUAL: TGLenum = 517;
		GEQUAL: TGLenum = 518;
		ALWAYS: TGLenum = 519;
		KEEP: TGLenum = 7680;
		REPLACE: TGLenum = 7681;
		INCR: TGLenum = 7682;
		DECR: TGLenum = 7683;
		INVERT: TGLenum = 5386;
		INCR_WRAP: TGLenum = 34055;
		DECR_WRAP: TGLenum = 34056;
		VENDOR: TGLenum = 7936;
		RENDERER: TGLenum = 7937;
		VERSION: TGLenum = 7938;
		NEAREST: TGLenum = 9728;
		LINEAR: TGLenum = 9729;
		NEAREST_MIPMAP_NEAREST: TGLenum = 9984;
		LINEAR_MIPMAP_NEAREST: TGLenum = 9985;
		NEAREST_MIPMAP_LINEAR: TGLenum = 9986;
		LINEAR_MIPMAP_LINEAR: TGLenum = 9987;
		TEXTURE_MAG_FILTER: TGLenum = 10240;
		TEXTURE_MIN_FILTER: TGLenum = 10241;
		TEXTURE_WRAP_S: TGLenum = 10242;
		TEXTURE_WRAP_T: TGLenum = 10243;
		TEXTURE_2D: TGLenum = 3553;
		TEXTURE: TGLenum = 5890;
		TEXTURE_CUBE_MAP: TGLenum = 34067;
		TEXTURE_BINDING_CUBE_MAP: TGLenum = 34068;
		TEXTURE_CUBE_MAP_POSITIVE_X: TGLenum = 34069;
		TEXTURE_CUBE_MAP_NEGATIVE_X: TGLenum = 34070;
		TEXTURE_CUBE_MAP_POSITIVE_Y: TGLenum = 34071;
		TEXTURE_CUBE_MAP_NEGATIVE_Y: TGLenum = 34072;
		TEXTURE_CUBE_MAP_POSITIVE_Z: TGLenum = 34073;
		TEXTURE_CUBE_MAP_NEGATIVE_Z: TGLenum = 34074;
		MAX_CUBE_MAP_TEXTURE_SIZE: TGLenum = 34076;
		TEXTURE0: TGLenum = 33984;
		TEXTURE1: TGLenum = 33985;
		TEXTURE2: TGLenum = 33986;
		TEXTURE3: TGLenum = 33987;
		TEXTURE4: TGLenum = 33988;
		TEXTURE5: TGLenum = 33989;
		TEXTURE6: TGLenum = 33990;
		TEXTURE7: TGLenum = 33991;
		TEXTURE8: TGLenum = 33992;
		TEXTURE9: TGLenum = 33993;
		TEXTURE10: TGLenum = 33994;
		TEXTURE11: TGLenum = 33995;
		TEXTURE12: TGLenum = 33996;
		TEXTURE13: TGLenum = 33997;
		TEXTURE14: TGLenum = 33998;
		TEXTURE15: TGLenum = 33999;
		TEXTURE16: TGLenum = 34000;
		TEXTURE17: TGLenum = 34001;
		TEXTURE18: TGLenum = 34002;
		TEXTURE19: TGLenum = 34003;
		TEXTURE20: TGLenum = 34004;
		TEXTURE21: TGLenum = 34005;
		TEXTURE22: TGLenum = 34006;
		TEXTURE23: TGLenum = 34007;
		TEXTURE24: TGLenum = 34008;
		TEXTURE25: TGLenum = 34009;
		TEXTURE26: TGLenum = 34010;
		TEXTURE27: TGLenum = 34011;
		TEXTURE28: TGLenum = 34012;
		TEXTURE29: TGLenum = 34013;
		TEXTURE30: TGLenum = 34014;
		TEXTURE31: TGLenum = 34015;
		ACTIVE_TEXTURE: TGLenum = 34016;
		&REPEAT: TGLenum = 10497;
		CLAMP_TO_EDGE: TGLenum = 33071;
		MIRRORED_REPEAT: TGLenum = 33648;
		FLOAT_VEC2: TGLenum = 35664;
		FLOAT_VEC3: TGLenum = 35665;
		FLOAT_VEC4: TGLenum = 35666;
		INT_VEC2: TGLenum = 35667;
		INT_VEC3: TGLenum = 35668;
		INT_VEC4: TGLenum = 35669;
		BOOL: TGLenum = 35670;
		BOOL_VEC2: TGLenum = 35671;
		BOOL_VEC3: TGLenum = 35672;
		BOOL_VEC4: TGLenum = 35673;
		FLOAT_MAT2: TGLenum = 35674;
		FLOAT_MAT3: TGLenum = 35675;
		FLOAT_MAT4: TGLenum = 35676;
		SAMPLER_2D: TGLenum = 35678;
		SAMPLER_CUBE: TGLenum = 35680;
		VERTEX_ATTRIB_ARRAY_ENABLED: TGLenum = 34338;
		VERTEX_ATTRIB_ARRAY_SIZE: TGLenum = 34339;
		VERTEX_ATTRIB_ARRAY_STRIDE: TGLenum = 34340;
		VERTEX_ATTRIB_ARRAY_TYPE: TGLenum = 34341;
		VERTEX_ATTRIB_ARRAY_NORMALIZED: TGLenum = 34922;
		VERTEX_ATTRIB_ARRAY_POINTER: TGLenum = 34373;
		VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: TGLenum = 34975;
		IMPLEMENTATION_COLOR_READ_TYPE: TGLenum = 35738;
		IMPLEMENTATION_COLOR_READ_FORMAT: TGLenum = 35739;
		COMPILE_STATUS: TGLenum = 35713;
		LOW_FLOAT: TGLenum = 36336;
		MEDIUM_FLOAT: TGLenum = 36337;
		HIGH_FLOAT: TGLenum = 36338;
		LOW_INT: TGLenum = 36339;
		MEDIUM_INT: TGLenum = 36340;
		HIGH_INT: TGLenum = 36341;
		FRAMEBUFFER: TGLenum = 36160;
		RENDERBUFFER: TGLenum = 36161;
		RGBA4: TGLenum = 32854;
		RGB5_A1: TGLenum = 32855;
		RGB565: TGLenum = 36194;
		DEPTH_COMPONENT16: TGLenum = 33189;
		STENCIL_INDEX: TGLenum = 6401;
		STENCIL_INDEX8: TGLenum = 36168;
		DEPTH_STENCIL: TGLenum = 34041;
		RENDERBUFFER_WIDTH: TGLenum = 36162;
		RENDERBUFFER_HEIGHT: TGLenum = 36163;
		RENDERBUFFER_INTERNAL_FORMAT: TGLenum = 36164;
		RENDERBUFFER_RED_SIZE: TGLenum = 36176;
		RENDERBUFFER_GREEN_SIZE: TGLenum = 36177;
		RENDERBUFFER_BLUE_SIZE: TGLenum = 36178;
		RENDERBUFFER_ALPHA_SIZE: TGLenum = 36179;
		RENDERBUFFER_DEPTH_SIZE: TGLenum = 36180;
		RENDERBUFFER_STENCIL_SIZE: TGLenum = 36181;
		FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: TGLenum = 36048;
		FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: TGLenum = 36049;
		FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: TGLenum = 36050;
		FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: TGLenum = 36051;
		COLOR_ATTACHMENT0: TGLenum = 36064;
		DEPTH_ATTACHMENT: TGLenum = 36096;
		STENCIL_ATTACHMENT: TGLenum = 36128;
		DEPTH_STENCIL_ATTACHMENT: TGLenum = 33306;
		NONE: TGLenum = 0;
		FRAMEBUFFER_COMPLETE: TGLenum = 36053;
		FRAMEBUFFER_INCOMPLETE_ATTACHMENT: TGLenum = 36054;
		FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: TGLenum = 36055;
		FRAMEBUFFER_INCOMPLETE_DIMENSIONS: TGLenum = 36057;
		FRAMEBUFFER_UNSUPPORTED: TGLenum = 36061;
		FRAMEBUFFER_BINDING: TGLenum = 36006;
		RENDERBUFFER_BINDING: TGLenum = 36007;
		MAX_RENDERBUFFER_SIZE: TGLenum = 34024;
		INVALID_FRAMEBUFFER_OPERATION: TGLenum = 1286;
		UNPACK_FLIP_Y_WEBGL: TGLenum = 37440;
		UNPACK_PREMULTIPLY_ALPHA_WEBGL: TGLenum = 37441;
		CONTEXT_LOST_WEBGL: TGLenum = 37442;
		UNPACK_COLORSPACE_CONVERSION_WEBGL: TGLenum = 37443;
		BROWSER_DEFAULT_WEBGL: TGLenum = 37444;
	public
		canvas: JHTMLCanvasElement;
		drawingBufferWidth: TGLsizei;
		drawingBufferHeight: TGLsizei;
		function getContextAttributes: JWebGLContextAttributes; { WebGLHandlesContextLoss } 
		function isContextLost: Boolean; { WebGLHandlesContextLoss } 
		function getSupportedExtensions: array of String;
		function getExtension(&name: String): Variant;
		procedure activeTexture(texture: TGLenum);
		procedure attachShader(&program: JWebGLProgram; shader: JWebGLShader);
		procedure bindAttribLocation(&program: JWebGLProgram; &index: TGLuint; &name: String);
		procedure bindBuffer(target: TGLenum; buffer: JWebGLBuffer);
		procedure bindFramebuffer(target: TGLenum; framebuffer: JWebGLFramebuffer);
		procedure bindRenderbuffer(target: TGLenum; renderbuffer: JWebGLRenderbuffer);
		procedure bindTexture(target: TGLenum; texture: JWebGLTexture);
		procedure blendColor(red: TGLclampf; green: TGLclampf; blue: TGLclampf; alpha: TGLclampf);
		procedure blendEquation(mode: TGLenum);
		procedure blendEquationSeparate(modeRGB: TGLenum; modeAlpha: TGLenum);
		procedure blendFunc(sfactor: TGLenum; dfactor: TGLenum);
		procedure blendFuncSeparate(srcRGB: TGLenum; dstRGB: TGLenum; srcAlpha: TGLenum; dstAlpha: TGLenum);
		procedure bufferData(target: TGLenum; size: TGLsizeiptr; usage: TGLenum); overload;
		procedure bufferData(target: TGLenum; data: JArrayBuffer; usage: TGLenum); overload;
		procedure bufferData(target: TGLenum; data: JArrayBufferView; usage: TGLenum); overload;
		procedure bufferSubData(target: TGLenum; offset: TGLintptr; data: TBufferDataSource);
		function checkFramebufferStatus(target: TGLenum): TGLenum; { WebGLHandlesContextLoss } 
		procedure clear(mask: TGLbitfield);
		procedure clearColor(red: TGLclampf; green: TGLclampf; blue: TGLclampf; alpha: TGLclampf);
		procedure clearDepth(depth: TGLclampf);
		procedure clearStencil(s: TGLint);
		procedure colorMask(red: TGLboolean; green: TGLboolean; blue: TGLboolean; alpha: TGLboolean);
		procedure compileShader(shader: JWebGLShader);
		procedure compressedTexImage2D(target: TGLenum; level: TGLint; internalformat: TGLenum; width: TGLsizei; height: TGLsizei; border: TGLint; data: JArrayBufferView);
		procedure compressedTexSubImage2D(target: TGLenum; level: TGLint; xoffset: TGLint; yoffset: TGLint; width: TGLsizei; height: TGLsizei; format: TGLenum; data: JArrayBufferView);
		procedure copyTexImage2D(target: TGLenum; level: TGLint; internalformat: TGLenum; x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei; border: TGLint);
		procedure copyTexSubImage2D(target: TGLenum; level: TGLint; xoffset: TGLint; yoffset: TGLint; x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei);
		function createBuffer: JWebGLBuffer;
		function createFramebuffer: JWebGLFramebuffer;
		function createProgram: JWebGLProgram;
		function createRenderbuffer: JWebGLRenderbuffer;
		function createShader(&type: TGLenum): JWebGLShader;
		function createTexture: JWebGLTexture;
		procedure cullFace(mode: TGLenum);
		procedure deleteBuffer(buffer: JWebGLBuffer);
		procedure deleteFramebuffer(framebuffer: JWebGLFramebuffer);
		procedure deleteProgram(&program: JWebGLProgram);
		procedure deleteRenderbuffer(renderbuffer: JWebGLRenderbuffer);
		procedure deleteShader(shader: JWebGLShader);
		procedure deleteTexture(texture: JWebGLTexture);
		procedure depthFunc(func: TGLenum);
		procedure depthMask(flag: TGLboolean);
		procedure depthRange(zNear: TGLclampf; zFar: TGLclampf);
		procedure detachShader(&program: JWebGLProgram; shader: JWebGLShader);
		procedure disable(cap: TGLenum);
		procedure disableVertexAttribArray(&index: TGLuint);
		procedure drawArrays(mode: TGLenum; first: TGLint; count: TGLsizei);
		procedure drawElements(mode: TGLenum; count: TGLsizei; &type: TGLenum; offset: TGLintptr);
		procedure enable(cap: TGLenum);
		procedure enableVertexAttribArray(&index: TGLuint);
		procedure finish;
		procedure flush;
		procedure framebufferRenderbuffer(target: TGLenum; attachment: TGLenum; renderbuffertarget: TGLenum; renderbuffer: JWebGLRenderbuffer);
		procedure framebufferTexture2D(target: TGLenum; attachment: TGLenum; textarget: TGLenum; texture: JWebGLTexture; level: TGLint);
		procedure frontFace(mode: TGLenum);
		procedure generateMipmap(target: TGLenum);
		function getActiveAttrib(&program: JWebGLProgram; &index: TGLuint): JWebGLActiveInfo;
		function getActiveUniform(&program: JWebGLProgram; &index: TGLuint): JWebGLActiveInfo;
		function getAttachedShaders(&program: JWebGLProgram): array of JWebGLShader;
		function getAttribLocation(&program: JWebGLProgram; &name: String): TGLint; { WebGLHandlesContextLoss } 
		function getBufferParameter(target: TGLenum; pname: TGLenum): Variant;
		function getParameter(pname: TGLenum): Variant;
		function getError: TGLenum; { WebGLHandlesContextLoss } 
		function getFramebufferAttachmentParameter(target: TGLenum; attachment: TGLenum; pname: TGLenum): Variant;
		function getProgramParameter(&program: JWebGLProgram; pname: TGLenum): Variant;
		function getProgramInfoLog(&program: JWebGLProgram): String;
		function getRenderbufferParameter(target: TGLenum; pname: TGLenum): Variant;
		function getShaderParameter(shader: JWebGLShader; pname: TGLenum): Variant;
		function getShaderPrecisionFormat(shadertype: TGLenum; precisiontype: TGLenum): JWebGLShaderPrecisionFormat;
		function getShaderInfoLog(shader: JWebGLShader): String;
		function getShaderSource(shader: JWebGLShader): String;
		function getTexParameter(target: TGLenum; pname: TGLenum): Variant;
		function getUniform(&program: JWebGLProgram; location: JWebGLUniformLocation): Variant;
		function getUniformLocation(&program: JWebGLProgram; &name: String): JWebGLUniformLocation;
		function getVertexAttrib(&index: TGLuint; pname: TGLenum): Variant;
		function getVertexAttribOffset(&index: TGLuint; pname: TGLenum): TGLintptr; { WebGLHandlesContextLoss } 
		procedure hint(target: TGLenum; mode: TGLenum);
		function isBuffer(buffer: JWebGLBuffer): TGLboolean; { WebGLHandlesContextLoss } 
		function isEnabled(cap: TGLenum): TGLboolean; { WebGLHandlesContextLoss } 
		function isFramebuffer(framebuffer: JWebGLFramebuffer): TGLboolean; { WebGLHandlesContextLoss } 
		function isProgram(&program: JWebGLProgram): TGLboolean; { WebGLHandlesContextLoss } 
		function isRenderbuffer(renderbuffer: JWebGLRenderbuffer): TGLboolean; { WebGLHandlesContextLoss } 
		function isShader(shader: JWebGLShader): TGLboolean; { WebGLHandlesContextLoss } 
		function isTexture(texture: JWebGLTexture): TGLboolean; { WebGLHandlesContextLoss } 
		procedure lineWidth(width: TGLfloat);
		procedure linkProgram(&program: JWebGLProgram);
		procedure pixelStorei(pname: TGLenum; param: TGLint);
		procedure polygonOffset(factor: TGLfloat; units: TGLfloat);
		procedure readPixels(x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei; format: TGLenum; &type: TGLenum; pixels: JArrayBufferView);
		procedure renderbufferStorage(target: TGLenum; internalformat: TGLenum; width: TGLsizei; height: TGLsizei);
		procedure sampleCoverage(value: TGLclampf; invert: TGLboolean);
		procedure scissor(x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei);
		procedure shaderSource(shader: JWebGLShader; source: String);
		procedure stencilFunc(func: TGLenum; ref: TGLint; mask: TGLuint);
		procedure stencilFuncSeparate(face: TGLenum; func: TGLenum; ref: TGLint; mask: TGLuint);
		procedure stencilMask(mask: TGLuint);
		procedure stencilMaskSeparate(face: TGLenum; mask: TGLuint);
		procedure stencilOp(fail: TGLenum; zfail: TGLenum; zpass: TGLenum);
		procedure stencilOpSeparate(face: TGLenum; fail: TGLenum; zfail: TGLenum; zpass: TGLenum);
		procedure texImage2D(target: TGLenum; level: TGLint; internalformat: TGLint; width: TGLsizei; height: TGLsizei; border: TGLint; format: TGLenum; &type: TGLenum; pixels: JArrayBufferView); overload;
		procedure texImage2D(target: TGLenum; level: TGLint; internalformat: TGLint; format: TGLenum; &type: TGLenum; source: TTexImageSource); overload;
		procedure texParameterf(target: TGLenum; pname: TGLenum; param: TGLfloat);
		procedure texParameteri(target: TGLenum; pname: TGLenum; param: TGLint);
		procedure texSubImage2D(target: TGLenum; level: TGLint; xoffset: TGLint; yoffset: TGLint; width: TGLsizei; height: TGLsizei; format: TGLenum; &type: TGLenum; pixels: JArrayBufferView); overload;
		procedure texSubImage2D(target: TGLenum; level: TGLint; xoffset: TGLint; yoffset: TGLint; format: TGLenum; &type: TGLenum; source: TTexImageSource); overload;
		procedure uniform1f(location: JWebGLUniformLocation; x: TGLfloat);
		procedure uniform1fv(location: JWebGLUniformLocation; v: JFloat32Array); overload;
		procedure uniform1fv(location: JWebGLUniformLocation; v: array of TGLfloat); overload;
		procedure uniform1i(location: JWebGLUniformLocation; x: TGLint);
		procedure uniform1iv(location: JWebGLUniformLocation; v: JInt32Array); overload;
		procedure uniform1iv(location: JWebGLUniformLocation; v: array of Integer); overload;
		procedure uniform2f(location: JWebGLUniformLocation; x: TGLfloat; y: TGLfloat);
		procedure uniform2fv(location: JWebGLUniformLocation; v: JFloat32Array); overload;
		procedure uniform2fv(location: JWebGLUniformLocation; v: array of TGLfloat); overload;
		procedure uniform2i(location: JWebGLUniformLocation; x: TGLint; y: TGLint);
		procedure uniform2iv(location: JWebGLUniformLocation; v: JInt32Array); overload;
		procedure uniform2iv(location: JWebGLUniformLocation; v: array of Integer); overload;
		procedure uniform3f(location: JWebGLUniformLocation; x: TGLfloat; y: TGLfloat; z: TGLfloat);
		procedure uniform3fv(location: JWebGLUniformLocation; v: JFloat32Array); overload;
		procedure uniform3fv(location: JWebGLUniformLocation; v: array of TGLfloat); overload;
		procedure uniform3i(location: JWebGLUniformLocation; x: TGLint; y: TGLint; z: TGLint);
		procedure uniform3iv(location: JWebGLUniformLocation; v: JInt32Array); overload;
		procedure uniform3iv(location: JWebGLUniformLocation; v: array of Integer); overload;
		procedure uniform4f(location: JWebGLUniformLocation; x: TGLfloat; y: TGLfloat; z: TGLfloat; w: TGLfloat);
		procedure uniform4fv(location: JWebGLUniformLocation; v: JFloat32Array); overload;
		procedure uniform4fv(location: JWebGLUniformLocation; v: array of TGLfloat); overload;
		procedure uniform4i(location: JWebGLUniformLocation; x: TGLint; y: TGLint; z: TGLint; w: TGLint);
		procedure uniform4iv(location: JWebGLUniformLocation; v: JInt32Array); overload;
		procedure uniform4iv(location: JWebGLUniformLocation; v: array of Integer); overload;
		procedure uniformMatrix2fv(location: JWebGLUniformLocation; transpose: TGLboolean; value: JFloat32Array); overload;
		procedure uniformMatrix2fv(location: JWebGLUniformLocation; transpose: TGLboolean; value: array of TGLfloat); overload;
		procedure uniformMatrix3fv(location: JWebGLUniformLocation; transpose: TGLboolean; value: JFloat32Array); overload;
		procedure uniformMatrix3fv(location: JWebGLUniformLocation; transpose: TGLboolean; value: array of TGLfloat); overload;
		procedure uniformMatrix4fv(location: JWebGLUniformLocation; transpose: TGLboolean; value: JFloat32Array); overload;
		procedure uniformMatrix4fv(location: JWebGLUniformLocation; transpose: TGLboolean; value: array of TGLfloat); overload;
		procedure useProgram(&program: JWebGLProgram);
		procedure validateProgram(&program: JWebGLProgram);
		procedure vertexAttrib1f(&index: TGLuint; x: TGLfloat);
		procedure vertexAttrib1fv(&index: TGLuint; values: TVertexAttribFVSource);
		procedure vertexAttrib2f(&index: TGLuint; x: TGLfloat; y: TGLfloat);
		procedure vertexAttrib2fv(&index: TGLuint; values: TVertexAttribFVSource);
		procedure vertexAttrib3f(&index: TGLuint; x: TGLfloat; y: TGLfloat; z: TGLfloat);
		procedure vertexAttrib3fv(&index: TGLuint; values: TVertexAttribFVSource);
		procedure vertexAttrib4f(&index: TGLuint; x: TGLfloat; y: TGLfloat; z: TGLfloat; w: TGLfloat);
		procedure vertexAttrib4fv(&index: TGLuint; values: TVertexAttribFVSource);
		procedure vertexAttribPointer(&index: TGLuint; size: TGLint; &type: TGLenum; normalized: TGLboolean; stride: TGLsizei; offset: TGLintptr);
		procedure viewportFunc(x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei); external 'viewport';
	end;

	JWebGLRenderingContext = class external 'WebGLRenderingContext'
	end;

	// Constructor( DOMString type , optional WebGLContextEventInit eventInit)
	JWebGLContextEvent = class external 'WebGLContextEvent' (JEvent)
	public
		statusMessage: String;
	end;

	JWebGLContextEventInit = class external 'WebGLContextEventInit' (JEventInit)
	public
		statusMessage: String;
	end;

